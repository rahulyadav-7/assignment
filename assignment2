
Explain what inheritance is in object-oriented programming and why it is used.

Answer: Inheritance is a fundamental concept in OOP where a new class, called a derived or child class, is created based on an existing class, known as a base or parent class. The derived class inherits attributes and methods from the base class, allowing for code reuse and the creation of a hierarchical relationship between classes.
Discuss the concept of single inheritance and multiple inheritance, highlighting their differences and advantages.

Answer:
Single Inheritance: A derived class inherits from only one base class. This simplifies the class hierarchy and reduces complexity.
Multiple Inheritance: A derived class can inherit from more than one base class. While this allows for more flexibility, it can lead to complexity and issues such as the "diamond problem," where ambiguity arises from multiple inheritance paths.
Explain the terms "base class" and "derived class" in the context of inheritance.

Answer:
Base Class: The original class from which other classes are derived. It provides common attributes and methods that can be reused.
Derived Class: A class that inherits from a base class, extending or modifying its behavior.
What is the significance of the "protected" access modifier in inheritance? How does it differ from "private" and "public" modifiers?

Answer: The "protected" access modifier allows a class member to be accessible within its own class and by derived classes, but not from outside these classes. "Private" members are only accessible within their own class, while "public" members can be accessed from anywhere.
What is the purpose of the "super" keyword in inheritance? Provide an example.

Answer: The super keyword is used to call a method from the parent class in the derived class. It allows access to methods or attributes from the base class that may be overridden in the derived class.
python
Copy code
class Vehicle:
    def __init__(self, make, model):
        self.make = make
        self.model = model

    def display_info(self):
        print(f"Vehicle: {self.make} {self.model}")

class Car(Vehicle):
    def __init__(self, make, model, fuel_type):
        super().__init__(make, model)
        self.fuel_type = fuel_type

    def display_info(self):
        super().display_info()
        print(f"Fuel Type: {self.fuel_type}")

car = Car("Toyota", "Corolla", "Petrol")
car.display_info()
Create a base class called "Vehicle" with attributes like "make", "model", and "year". Then, create a derived class called "Car" that inherits from "Vehicle" and adds an attribute called "fuel_type". Implement appropriate methods in both classes.

python
Copy code
class Vehicle:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def display_info(self):
        print(f"Vehicle: {self.year} {self.make} {self.model}")

class Car(Vehicle):
    def __init__(self, make, model, year, fuel_type):
        super().__init__(make, model, year)
        self.fuel_type = fuel_type

    def display_info(self):
        super().display_info()
        print(f"Fuel Type: {self.fuel_type}")

car = Car("Honda", "Civic", 2020, "Gasoline")
car.display_info()
Create a base class called "Employee" with attributes like "name" and "salary." Derive two classes, "Manager" and "Developer," from "Employee." Add an additional attribute called "department" for the "Manager" class and "programming_language" for the "Developer" class.

python
Copy code
class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.salary = salary

class Manager(Employee):
    def __init__(self, name, salary, department):
        super().__init__(name, salary)
        self.department = department

class Developer(Employee):
    def __init__(self, name, salary, programming_language):
        super().__init__(name, salary)
        self.programming_language = programming_language
Design a base class called "Shape" with attributes like "colour" and "border_width." Create derived classes, "Rectangle" and "Circle," that inherit from "Shape" and add specific attributes like "length" and "width" for the "Rectangle" class and "radius" for the "Circle" class.

python
Copy code
class Shape:
    def __init__(self, colour, border_width):
        self.colour = colour
        self.border_width = border_width

class Rectangle(Shape):
    def __init__(self, colour, border_width, length, width):
        super().__init__(colour, border_width)
        self.length = length
        self.width = width

class Circle(Shape):
    def __init__(self, colour, border_width, radius):
        super().__init__(colour, border_width)
        self.radius = radius
Create a base class called "Device" with attributes like "brand" and "model." Derive two classes, "Phone" and "Tablet," from "Device." Add specific attributes like "screen_size" for the "Phone" class and "battery_capacity" for the "Tablet" class.

python
Copy code
class Device:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

class Phone(Device):
    def __init__(self, brand, model, screen_size):
        super().__init__(brand, model)
        self.screen_size = screen_size

class Tablet(Device):
    def __init__(self, brand, model, battery_capacity):
        super().__init__(brand, model)
        self.battery_capacity = battery_capacity
Create a base class called "BankAccount" with attributes like "account_number" and "balance." Derive two classes, "SavingsAccount" and "CheckingAccount," from "BankAccount." Add specific methods like "calculate_interest" for the "SavingsAccount" class and "deduct_fees" for the "CheckingAccount" class.

python
Copy code
class BankAccount:
    def __init__(self, account_number, balance):
        self.account_number = account_number
        self.balance = balance

class SavingsAccount(BankAccount):
    def __init__(self, account_number, balance, interest_rate):
        super().__init__(account_number, balance)
        self.interest_rate = interest_rate

    def calculate_interest(self):
        return self.balance * self.interest_rate

class CheckingAccount(BankAccount):
    def __init__(self, account_number, balance, fee):
        super().__init__(account_number, balance)
        self.fee = fee

    def deduct_fees(self):
        self.balance -= self.fee
